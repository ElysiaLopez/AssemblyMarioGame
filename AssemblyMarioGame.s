// These are addresses for the pixel buffer and text buffer
.EQU PIX_BUFFER, 0xc8000000
.EQU TEXT_BUFFER, 0xc9000000

// These are some useful defines that will help you access structure fields
.EQU PIXMAP_WIDTH, 0
.EQU PIXMAP_HEIGHT, 2
.EQU PIXMAP_TRANSPARENCY, 4
.EQU PIXMAP_PIXELDATA, 6

// 320x240, 1024 bytes/row, 2 bytes per pixel: DE1-SoC
.equ WIDTH, 320
.equ HEIGHT, 240
.equ BUFFER_SIZE, 1024 * 240
.equ LOG2_BYTES_PER_ROW, 10
.equ LOG2_BYTES_PER_PIXEL, 1
.equ CHAR_WIDTH, 80
.equ CHAR_HEIGHT, 60
.equ CHARBUF, 0xc9000000 // Character buffer
.equ OTHER_PIXBUF, 0xc1000000 // Secondary character buffer
.equ BUF_REG, 0xFF203020 // Buffer register / front buffer
.equ BACK_BUF_ADDR, 0xFF203024 // Backbuffer register
.equ STATUS_REG, 0xFF20302C // Status register

.equ SPRITE_PIXMAP, 0
.equ SPRITE_X, 4
.equ SPRITE_Y, 6
.equ SPRITE_XSPEED, 8
.equ SPRITE_YSPEED, 10

.equ PUSH_BUTTONS, 0xff200050

.text

.global _start
_start:
	
	// Inital stack
	mov sp, #0x800000
	
	ldr r0, =mario
	
	ldr r0, =BACK_BUF_ADDR //backbuffer
	ldr r1, =PIX_BUFFER
	str r1, [r0]
	
	ldr r0, =BUF_REG
	mov r1, #1
	str r1, [r0]
	
wait2:
	ldr r0, =BUF_REG
	ldr r0, [r0]
	ldr r1, =PIX_BUFFER
	cmp r0, r1
	bne wait2
	
	ldr r0, =BACK_BUF_ADDR
	ldr r1, =OTHER_PIXBUF
	str r1, [r0]
	
	//stores initial state of push button #0
	mov r4, #0
	ldr r5, =PUSH_BUTTONS
	ldrb r5, [r5]
	
	ldrb r6, =mario
	
	mov r7, #0 //button press count
	
inf_loop:
	
	bl ClearTextBuffer
	ldrh r0, =0x0000
	bl ClearVGA
	
	mov r0, #0
	mov r1, #0
	mov r2, r7
	bl DrawNum
	
renderSprites:
	
	ldr r0, =sprite1
	bl drawSprite
	
	ldr r0, =sprite2
	bl drawSprite
	
	bl setSwapFlag
	
	ldr r0, =sprite1
	bl updateSprite
	
	ldr r0, =sprite2
	bl updateSprite
	
	ldr r0, =sprite1
	ldr r1, =sprite2
	bl bounceIfSpritesCollide
	
	mov r0, #0
	bl checkIfButtonBumped
	add r7, r7, r0
	
	mov r0, #1
	bl checkIfButtonBumped
	add r7, r7, r0
	
	mov r0, #2
	bl checkIfButtonBumped
	add r7, r7, r0
	
	mov r0, #3
	bl checkIfButtonBumped
	add r7, r7, r0
	
	ldr r5, =PUSH_BUTTONS
	ldrb r5, [r5]
	
	ldr r6, =prevButtonStates
	strb r5, [r6]
	
infLoopEnd:
	b inf_loop
	
bounceIfSpritesCollide:
	//r0 = ptr to sprite1
	//r1 = ptr to sprite2
	
	push {r4, r5, r6, r7, lr}
	
	mov r4, r0
	mov r5, r1
	
	bl checkCollisionBetweenSprites
	cmp r0, #1
	bne endBounceIfSpritesCollide
	
	ldrh r6, [r4, #SPRITE_XSPEED]
	mov r7, #-1
	mul r6, r6, r7
	strh r6, [r4, #SPRITE_XSPEED]
	
	ldrh r6, [r5, #SPRITE_XSPEED]
	mul r6, r6, r7
	strh r6, [r5, #SPRITE_XSPEED]

endBounceIfSpritesCollide:
	pop {r4, r5, r6, r7, pc}
	
checkCollisionBetweenSprites: //(sprite, sprite) => 0 or 1
	//r0 = ptr to sprite 1
	//r1 = ptr to sprite 2
	
	push {r4, r5, r6, r7, r8, r9, lr}
	
	ldrh r4, [r0, #SPRITE_X]
	ldrh r5, [r0, #SPRITE_PIXMAP]
	ldrh r5, [r5, #PIXMAP_WIDTH]
	ldrh r6, [r1, #SPRITE_X]
	ldrh r7, [r1, #SPRITE_PIXMAP]
	ldrh r7, [r7, #PIXMAP_WIDTH]
	
	//if (sprite1.x + sprite1.width / 2 < sprite2.x + sprite2.width / 2
	// && sprite1.x + sprite1.width / 2 > sprite2.x - sprite2.width / 2)
	// then: colliding in x direction
	
collisionRight: //check if right side of sprite1 is between left and right sides of sprite2
	add r8, r4, r5, lsr #1 //right side of sprite1
	add r9, r6, r7, lsr #1 //right side of sprite2
	cmp r8, r9
	bgt collisionLeft
	sub r9, r6, r7, lsr #1 //left side of sprite2
	cmp r8, r9
	blt collisionLeft
	b collisionTop //sprites collide in x dir
	
collisionLeft: //check if left side of sprite1 is between left and right sides of sprite2
	sub r8, r4, r5, lsr #1 //sprite1.x - sprite1.width / 2
	cmp r8, r9 //compare left side of sprite1 with left side of sprite2
	blt setCollisionToFalse
	add r9, r6, r7, lsr #1
	bgt setCollisionToFalse
	
collisionTop: //check if top of sprite1 is between top and bottom of sprite2

	//if(sprite1.y - sprite1.height / 2 > sprite2.y - sprite2.height / 2
	//&& sprite1.y - sprite1.height / 2 < sprite2.y + sprite2.height / 2)
	//then: colliding in the y direction
	
	ldrh r4, [r0, #SPRITE_Y]
	ldrh r5, [r0, #SPRITE_PIXMAP]
	ldrh r5, [r5, #PIXMAP_HEIGHT]
	ldrh r6, [r1, #SPRITE_Y]
	ldrh r7, [r1, #SPRITE_PIXMAP]
	ldrh r7, [r7, #PIXMAP_HEIGHT]
	
	sub r8, r4, r5, lsr #1 //r8 = top of sprite1
	sub r9, r6, r7, lsr #1 //r9 = top of sprite2
	
	cmp r8, r9
	blt collisionBottom
	
	add r9, r6, r7, lsr #1 //r9 = bottom of sprite2
	cmp r8, r9
	bgt collisionBottom
	mov r0, #1
	b endCheckSpriteCollision
	
collisionBottom:
	add r8, r4, r5, lsr #1 //r8 = bottom of sprite1
	
	cmp r8, r9
	bgt setCollisionToFalse
	
	sub r9, r6, r7, lsr #1 //r9 = top of sprite2
	cmp r8, r9
	blt setCollisionToFalse
	mov r0, #1
	b endCheckSpriteCollision

setCollisionToFalse:
	mov r0, #0

endCheckSpriteCollision:
	pop {r4, r5, r6, r7, r8, r9, pc}
	
checkIfButtonBumped:
	//r0 = button #
	
	//returns buttonPressed ? 1 : 0
	
	push {r4, r5, r6, lr}
	
	//gets state of push button #0
	ldr r5, =PUSH_BUTTONS
	ldrb r4, [r5]
	mov r5, #1
	lsl r5, r5, r0
	and r4, r4, r5 //gets the status of the desired button
	
	//if(buttonState == 1 || buttonState == lastButtonState) return false;
	cmp r4, #1
	beq buttonNotBumped
	
	ldr r5, =prevButtonStates
	ldrb r5, [r5]
	mov r6, #1
	and r5, r5, r6, lsl r0
	cmp r4, r5
	beq buttonNotBumped
	mov r0, #1
	b endCheckIfButtonBumped
	
buttonNotBumped:
	mov r0, #0
	
endCheckIfButtonBumped:
	pop {r4, r5, r6, pc}
	
setSwapFlag:
	push {r4, r5, lr}
	
	ldr r4, =STATUS_REG	
	and r4, r4, #1
	cmp r4, #0
	bne endSetSwapFlag
	
	mov r4, #1
	ldr r5, =BUF_REG
	str r4, [r5]
	
endSetSwapFlag:
	pop {r4, r5, pc}
	
swapPixmaps:
	//r0 = ptr to pixmap1 (word)
	//r1 = ptr to pixmap2 (word)
	//r2 = ptr to sprite (sprite)
	
	push {r4, lr}
	
	ldr r4, [r2, #SPRITE_PIXMAP]
	cmp r4, r0
	beq sprite1_pixmap2
	str r0, [r2, #SPRITE_PIXMAP]
	b swapPixmapsEnd

sprite1_pixmap2:
	str r1, [r2, #SPRITE_PIXMAP]
	
swapPixmapsEnd:
	pop {r4, pc}
	
updateSprite:
	//r0 = ptr to sprite
	
	push {r4, r5, r6, r7, r8, lr}
	
	ldrh r5, [r0, #SPRITE_PIXMAP]
	ldrh r4, [r5, #PIXMAP_WIDTH]
	
	ldrh r5, [r0, #SPRITE_XSPEED]
	lsl r5, r5, #16
	asr r5, r5, #16
	ldrh r6, [r0, #SPRITE_X]
	lsl r6, r6, #16
	asr r6, r6, #16
	add r6, r6, r5
	sub r7, r6, r4, lsr #1 //sprite.x - (sprite.width / 2) -> left side
	cmp r7, #0
	blt negateXSpeed
	add r7, r6, r4, lsr #1 //sprite.x + (sprite.width / 2) -> right side
	cmp r7, #WIDTH
	bgt negateXSpeed
	b checkY
	
negateXSpeed:
	mov r4, #-1
	mul r5, r4, r5 //sprite.xspeed *= -1
	strh r5, [r0, #SPRITE_XSPEED]
	add r6, r6, r5, lsl #1 //move the sprite in the opposite direction
	
checkY:
	ldrh r5, [r0, #SPRITE_PIXMAP]
	ldrh r4, [r5, #PIXMAP_HEIGHT]
	
	ldrh r5, [r0, #SPRITE_YSPEED]
	lsl r5, r5, #16
	asr r5, r5, #16
	ldrh r7, [r0, #SPRITE_Y]
	lsl r7, r7, #16
	asr r7, r7, #16
	add r7, r7, r5
	sub r8, r7, r4, lsr #1 //sprite.y - sprite.height / 2 -> top
	cmp r8, #0
	blt negateYSpeed
	add r8, r7, r4, lsr #1 //sprite.y + sprite.height / 2 -> bottom
	cmp r8, #HEIGHT
	bgt negateYSpeed
	b endUpdateSprite
	
negateYSpeed:
	mov r8, #-1
	mul r5, r5, r8
	strh r5, [r0, #SPRITE_YSPEED]
	add r7, r7, r5, lsl #1
	
endUpdateSprite:
	//r6 = updated x pos
	//r5 = updated y pos
	
	strh r6, [r0, #SPRITE_X]
	strh r7, [r0, #SPRITE_Y]
	
	pop {r4, r5, r6, r7, r8, pc}
	
	
drawSprite:
	//r0 = ptr to sprite
	
	push {lr}
	
	ldrh r1, [r0, #SPRITE_X]
	ldrh r2, [r0, #SPRITE_Y]
	ldr r0, [r0]
	bl BitBlit
	
	pop {pc}
	
TestStr:
	.string "Hola!\0"
	.align 4
TestStr2:
	.string "hello world\0"
	.align 4
	
CountDigits:
	//r0 - number
	//r1 - 10
	push {r2, lr}
	mov r2, #0
countDigitsLoop:
	cmp r0, #0
	beq exitCountDigits
	bl DivideTwoNums
	add r2, r2, #1
	b countDigitsLoop
countZero:
	mov r0, #1
	pop {r2, pc}
exitCountDigits:
	sub r2, r2, #1
	mov r0, r2
	pop {r2, pc}
DivideTwoNums: // r0 = dividend, r1 = divisor
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r5, r0 //r5 = number
	mov r6, #0 // r6 = quotient
divideLoop:
	cmp r5, r1
	blt end
	sub r5, r5, r1
	add r6, #1
	b divideLoop
end:
	mov r0, r6
	pop {r4, r5, r6, pc}
ModTwoNums:
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r5, r0 //r5 = number
	mov r6, #0 // r6 = quotient
modLoop:
	cmp r5, r1
	blt modEnd
	sub r5, r5, r1
	add r6, #1
	b modLoop
modEnd:
	mov r0, r5
	pop {r4, r5, r6, pc}
	
DrawNum:
	//r0 - x left
	//r1 - y top
	//r2 - num
	push {r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr }
	cmp r2, #0 //branch if num is zero
	beq zero 
	cmp r2,#0 //branch if num is positive
	bgt logic
	mov r3, r2 //store num
	mov r10, #-1 
	mul r2, r2, r10 //since num is negative, negate it
logic:
	mov r10, r0 //save x coord
	mov r11, r1 //save y coord
	mov r4, #128
	mul r1, r1, r4 //multiply y coord by 128 (width of a char)
	add r7, r0, r1 // add x coord to y coord to get position in char buffer
	mov r4, r2
	//set parameters for CountDigits
	mov r0, r2
	mov r1, #10
	bl CountDigits
	//add number of digits to the charbuffer
	add r7, r0, r7
	ldr r8, =CHARBUF
	mov r9, r7
	//branch if number is positive
	cmp r3, #0
	bge drawNumLoop
	//if number is negative, draw negative symbol
	add r9, r9, #1
	sub r3, r9, r0
	sub r3, r3, #1
	mov r7, #45
	strb r7, [r8, r3]
//loop through all digits and add them to char buffer
drawNumLoop:
	cmp r4, #0 //compare dividing number to 0
	beq drawNumEnd //if it is 0 then we are done
	mov r0, r4 //reset r0 to cur number
	mov r1, #10
	bl DivideTwoNums //divide r0 by r1
	mov r6, r0 //r6 = quotient
	mov r0, r4 //reset r0 to cur number
	mov r1, #10
	bl ModTwoNums //mod r0 by r1
	mov r7, r0 //r7 = mod value
	add r7, r7, #48
	strb r7, [r8, r9]
	sub r9, r9, #1
	mov r4, r6 //update r4 to new divide value
	b drawNumLoop
zero:
	//put zero in char buffer
	mov r7, #48 //ascii val of 0
	mov r4, #128 //(width of a char)
	mul r1, r1, r4 //multiply y-coord by 128
	add r9, r0, r1 //add x-coord
	ldr r8, =CHARBUF
	strb r7, [r8, r9] //store '0' at [charBuff + charPositionInBuff]
	b drawNumEnd
drawNumEnd:
	pop {r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, pc }
	
DrawStr:
	// Draws a string at (r0, r1)
	// r0 - x left (not in pixels but in character position)
	// r1 - y top  (not in pixels but in character position)
	push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	//calculate full offset based on r0, r1
	mov r4, #128 
	mul r1, r1, r4
	add r0, r0, r1
	//calculate end of row so we don't write past it
	mov r12, #128
	mul r12, r12, r1
	add r12, r12, #80
	//init values
	mov r4, #0
	mov r5, r0
	mov r8, #0
	ldrb r7, =TestStr
	ldr r6, =CHARBUF
	ldrb r9, [r7] //load character from memory address
drawStrLoop:
	//check that we are not writing across the screen
	add r11, r0, r4
	cmp r11, r12
	beq exit
	strb r9, [r6, r5] //store character into buffer
	add r5, r5, #1 //move offset
	add r4, r4, #1 //index in string
	add r9, r7, r4 //get offset from text 
	ldrb r9, [r9] //load value from that memory address
	cmp r9, r8 //compare against null terminator
	bne drawStrLoop //branch to loop if not done
	b exit
	exit:
	pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}
DupByte:
	// r0 = addr
	// r1 = byteVal
	// r2= len
	mov r3, #0
	b for_cond
for_body:
	strb r1, [r0, r3]
	// increment
	add r3, r3, #1
for_cond:
	cmp r3, r2
	blt for_body
	bx lr
	
// Write your ClearTextBuffer, ClearVGA, and BitBlit routines below!

ClearTextBuffer:
	push {lr}
	ldr r0, =TEXT_BUFFER // r0 = address of text buffer
	mov r1, #32 // r1 = the ascii val of space
	mov r2, #7680 // r2 = length of buffer
	bl DupByte
	pop {pc}//    == pop {lr} ; bx lr
	
ClearVGA:
	push {r4, r5, lr}
	mov r1, r0
	ldr r4, =BACK_BUF_ADDR
	ldr r0, [r4]
	ldr r2, =BUFFER_SIZE
	bl DupByte
	
ClearVGAEnd:
	pop {r4, r5, pc}

BitBlit:
	// r0 = pointer to pixmap
		//PixMap
		//{	
		// 	width : halfword
		// 	height : halfword
		// 	transparency : halfword
		// 	pixeldata : halfword list (length = width * height)
	// r1 = x
	// r2 = y
	
	push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	
	//check status register to see if we should draw
	
	ldr r6, =STATUS_REG
	and r6, #1
	cmp r6, #1
	beq bit_blit_end
	
	// r4 = ptr to pixmap
	// r5 = x-coord
	// r6 = y-coord
	// r8 = curr index in pixmap
	// r10 = curr val in pixmap
	// r11 = address of pixbuffer
	// r12 = length of pixmap
	// r7, r9 = temp registers

	//initialize registers
	mov r3, #0
	mov r4, r0 // ptr to pixmap
	mov r5, r1 // x-coord
	mov r6, r2 // y-coord
	
	ldrh r7, [r0, #PIXMAP_WIDTH]
	ldrh r8, [r0, #PIXMAP_HEIGHT]
	mul r12, r7, r8 // r12 = length of pixmap
	
	ldr r11, =BACK_BUF_ADDR
	ldr r11, [r11]
	
	//center x and y to be the center of the image
	lsr r9, r7, #1
	sub r5, r5, r9 //subtracts x by half the width
	lsr r9, r8, #1
	sub r6, r6, r9 //subtracts y by half the height
	
	ldr r7, =OriginX
	str r5, [r7]
	
	mov r8, #0 // curr index in pixmap
	
	b bit_blit_cond
	
bit_blit_body:
	
	//skips drawing if either the x-coord or y-coord is negative
	
	cmp r6, #0
	blt skipPixel
	cmp r5, #0
	blt skipPixel
	
	add r3, r3, #1
	
	cmp r3, #0x400
	
	//copy the next two bytes (aka halfword) from the pixmap into the pixbuffer
	
	lsl r9, r8, #1 //pixel offset
	add r9, r9, #PIXMAP_PIXELDATA //adds offset of pixeldata
	ldrh r10, [r4, r9] //stores the current value in the pixmap
	
	ldrh r9, [r4, #PIXMAP_TRANSPARENCY]
	cmp r9, r10
	beq skipPixel
	
	// pixel addr: 0xc8000000 + ZEXT(32, { y<7:0>, x<8:0>, 0<0>})
	
	and r7, r6, #0xff //y<7:0>
	ldr r9, =0x1FF //mask for x
	and r9, r5, r9 //x<8:0>
	lsl r9, r9, #1 //adds extra zero bit to end
	lsl r7, r7, #10 //shifts y segment into right position
	orr r7, r7, r9 // concatenates x, y, and extra 0 bit
	
	strh r10, [r11, r7] //stores color at calculated offset
	
skipPixel:
	add r8, r8, #1 //increment index in pixbuffer
	add r5, r5, #1 //increment x-coord
	//mod x by width of image
	ldr r7, =OriginX // get origin x
	ldr r7, [r7]
	sub r0, r5, r7 // subtract origin from curr X
	ldrh r1, [r4, #PIXMAP_WIDTH] // get width of image
	bl ModTwoNums // get x position in image
	mov r5, r0
	add r5, r5, r7 //re-add the origin back to curr X
	
	cmp r5, r7 //checks if the curr index moved to a new row
	bne bit_blit_cond
	add r6, r6, #1 //increment y-coord

bit_blit_cond:
	cmp r8, r12
	blt bit_blit_body
	
bit_blit_end:
	pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}
	
.data
	// You can use this small simple data to test your BitBlit routine
	// It should draw a small brown rectangle (transparent in the middle)
	
.align 2

prevButtonStates:
	.byte 0x0000

.align 2

sprite1:
	.long mario
	.hword 50 //sint16 x
	.hword 100 //sint16 y
	.hword 5 //sint16 x-speed
	.hword 5 //sint16 y-speed

sprite2:
	.long mario
	.hword 212 //sint16 x
	.hword 100 //sint16 y
	.hword 5 //sint16 x-speed
	.hword 5 //sint16 y-speed

OriginX:
	.word 0x00000000
	
.align 1
SimplePix:
	.hword 8, 8, 0xf7be
	.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
	.hword 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4, 0xc4c4
	
mario:
	.hword 64, 32, 0x0000
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7de, 0xf7ff, 0xf7ff, 0xf7ff, 0xf7ff, 0xf7ff
	.hword 0xf7ff, 0xf7ff, 0xf7ff, 0xf7de, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0xc40f, 0xbb8d
	.hword 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xbb8e, 0xc410, 0xef7d, 0xf7be
	.hword 0xf7be, 0xef7c, 0xd615, 0xd5f4, 0xd5f4, 0xd614, 0xd5f4, 0xde36, 0xef9d, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7de, 0xef5d, 0xa165, 0x9082, 0x98a2, 0x98a2, 0x90a3, 0x90c3, 0x90c3, 0x90c3
	.hword 0x90a2, 0x9986, 0xef5c, 0xf7de, 0xf7de, 0xef3b, 0xc4ee,0xc4cd, 0xc4cd, 0xc4cd
	.hword 0xc4cd, 0xcd50, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0xbb4d, 0xaa89, 0x9924, 0x98e3, 0x98e3, 0x98e4
	.hword 0x98e3, 0x98e4, 0x98e4, 0x9904, 0x9904, 0x9924, 0xaa8a, 0xb2aa, 0xaaaa, 0xaa89
	.hword 0xa206, 0xa247, 0xc4ce, 0xc4ee, 0xc4ee, 0xcd50, 0xef9d,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef5c, 0xa186, 0x9082
	.hword 0x90e3, 0x90e3, 0x90e3, 0x90e3, 0x9904, 0x9904, 0x9924, 0x9924, 0x9104, 0x9104
	.hword 0x90e3, 0x90e3, 0x90c3, 0x90e3, 0x98e3, 0x9965, 0xbc8d, 0xc4ce, 0xbcad, 0xcd30
	.hword 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7de, 0xef7d, 0x69c6, 0x50c2, 0x5903, 0x5903, 0x50e3, 0x5924, 0xb40c, 0xbc6d
	.hword 0xbc6d, 0xb40c, 0x4165, 0x4185, 0xb42c, 0xc48e, 0xde38, 0xcd55, 0x9904, 0x9904
	.hword 0x9985, 0x9985, 0x9965, 0xaa89, 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xdefb, 0xd699, 0x6a27, 0x5964, 0x5103, 0x5103
	.hword 0x5964, 0x61c5, 0xbcad, 0xc50e, 0xc50e, 0xb4ad, 0x2965, 0x3185, 0xbcad, 0xcd50
	.hword 0xef7c, 0xde99, 0x9985, 0x9944, 0x98e4, 0x98e3, 0x90c3, 0xa207, 0xef7d, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0x6a07, 0x5964
	.hword 0xb46d, 0xbcad, 0x5964, 0x5123, 0xb46d, 0xc4ee, 0xc4ee, 0xc4ee, 0xc4ee, 0xb48d
	.hword 0x2965, 0x3165, 0xbccd, 0xc50e, 0xc50f, 0xc4ee, 0xbcad, 0xb42c, 0x9104, 0x90e3
	.hword 0x90c3, 0xa208, 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xef7c, 0x61c6, 0x5102, 0xb48d, 0xc4ce, 0x5964, 0x5123, 0x9baa, 0xac0c
	.hword 0xbccd, 0xc4ee, 0xc4ee, 0xbcad, 0x5247, 0x5247, 0x9beb, 0xa40c, 0xbccd, 0xc4cd
	.hword 0xc4ee, 0xbc6d, 0x9a06, 0x99a5, 0x90e3, 0xa208, 0xef7d, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0x61c6, 0x5102, 0xbc8d, 0xc4ce
	.hword 0x5943, 0x48c2, 0x48c2, 0x5103, 0xb46d, 0xc4ee, 0xc4ce, 0xc4ce, 0xcd0e, 0xb48d
	.hword 0x2945, 0x3185, 0xbcad, 0xc4ee, 0xc4ee, 0xc4ee, 0xc50e, 0xb46d, 0x90a2, 0xa1c7
	.hword 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef7d
	.hword 0x61c6, 0x48e2, 0x8b29, 0x9369, 0x7a87, 0x7a67, 0x7a67, 0x7aa7, 0xbc8d, 0xc4ce
	.hword 0xc4ce, 0xbcad, 0x8b8a, 0x7b29, 0x2944, 0x2965, 0x834a, 0x836a, 0x836a, 0x8b6a
	.hword 0xab4a, 0xab4a, 0xb32c, 0xbc0f, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xef7d, 0x59a5, 0x4081, 0x4081, 0x48c2, 0xb48d, 0xc50e
	.hword 0xc4ee, 0xc4ee, 0xbccd, 0xbccd, 0xc4ce, 0xb46d, 0x2124, 0x18c3, 0x1904, 0x1904
	.hword 0x18e3, 0x18e4, 0x1904, 0x2904, 0x88a2, 0xa1c7, 0xf7be, 0xf7ff, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xb554, 0xacd2
	.hword 0xacf2, 0xacf2, 0xbcce, 0xbccd, 0xbccd, 0xbccd, 0xbccd, 0xbcce, 0xbcce, 0xb4ad
	.hword 0x7b4a, 0x7b29, 0x7b29, 0x7b29, 0x7b29, 0x72e9, 0x6124, 0x68e3, 0x88a3, 0xa1c7
	.hword 0xef7d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7de, 0xf7ff, 0xffff, 0xffff, 0xf7de, 0xc530, 0xbccd, 0xc4cd, 0xbccd
	.hword 0xbcce, 0xbcce, 0xbcce, 0xbcce, 0xc4ee, 0xc4ee, 0xc4ed, 0xc4ee, 0xc4ee, 0xbc6d
	.hword 0x9924, 0x90c3, 0x88a2, 0x99c7, 0xef7d, 0xf7de, 0xf7de, 0xf7de, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xbb4d, 0xaa89, 0xaaaa, 0xaaaa, 0xaaaa, 0xaa8a
	.hword 0xa206, 0x91e7, 0x5a91, 0x5a91, 0x99e7, 0x99e6, 0x99e6, 0x99e6, 0x99e6, 0x91e7
	.hword 0x5291, 0x5a90, 0x99e6, 0x99c5, 0x88c3, 0x9165, 0xd5b6, 0xde38, 0xf7de, 0xce58
	.hword 0x7aca, 0x93ce, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xef9d, 0xf79d, 0xef5c, 0xa1a6, 0x8861
	.hword 0x9082, 0x9082, 0x9082, 0x8882, 0x90a2, 0x80c4, 0x31b2, 0x31b2, 0x88c4, 0x88a3
	.hword 0x88a3, 0x88a3, 0x88a2, 0x80c4, 0x31b2, 0x31b1, 0x80c4, 0x88c3, 0x88c3, 0x99e7
	.hword 0xef9d, 0xf7de, 0xf7bd, 0xb575, 0x4061, 0x61e6, 0xef9d, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xcdb2, 0xc52f
	.hword 0xc530, 0xc50f, 0x9965, 0x90a2, 0x90c3, 0x90c3, 0x90c3, 0x90c3, 0x90c3, 0x90c3
	.hword 0x80e5, 0x7906, 0x41af, 0x41af, 0x88c4, 0x90c2, 0x90c3, 0x88c3, 0x80e5, 0x7907
	.hword 0x396f, 0x5251, 0xde79, 0xe6da, 0xfffe, 0xce37, 0x61e6, 0x5985, 0x40c2, 0x6a27
	.hword 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xef9d, 0xc530, 0xbcad, 0xbcad, 0xbc8d, 0x99a5, 0x9104, 0x90e3, 0x90c3
	.hword 0x90c3, 0x90c3, 0x90c3, 0x90c3, 0x90c2, 0x88c4, 0x31d2, 0x31d2, 0x78e6, 0x80e4
	.hword 0x80e4, 0x80e4, 0x88e4, 0x7905, 0x3a10, 0x4ad3, 0xd6bc, 0xd6fd, 0xdefd, 0xad35
	.hword 0x40a2, 0x48c2, 0x40c2, 0x6a27, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0xc530, 0xbc8d, 0xbcad, 0xbcad
	.hword 0xb46c, 0xb42c, 0x9103, 0x8882, 0x90a2, 0x90c2, 0x90c2, 0x90c2, 0x90c2, 0x88c4
	.hword 0x31b1, 0x29d3, 0x31b2, 0x31b2, 0x31b1, 0x31b1, 0x31b1, 0x4230, 0xad24, 0xa4e5
	.hword 0x3a32, 0x31f3, 0x3213, 0x31d0, 0x48e3, 0x48e2, 0x40c2, 0x6a27, 0xef9d, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d
	.hword 0xd5d4, 0xc571, 0xbcce, 0xb48d, 0xc530, 0xc551, 0xaaeb, 0xa269, 0x7927, 0x7107
	.hword 0x7106, 0x7906, 0x78e6, 0x7107, 0x31b1, 0x31f2, 0x4aaf, 0x4aaf, 0x31f2, 0x29d2
	.hword 0x29d3, 0x3a31, 0x9467, 0x8c28, 0x31d1, 0x29b2, 0x29d2, 0x31b0, 0x48e3, 0x48e2
	.hword 0x40a2, 0x6a27, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf79d, 0xbd0f, 0xac4b, 0xde98, 0xffff
	.hword 0xffff, 0xf7df, 0x4ab4, 0x29b2, 0x29d3, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x3a11
	.hword 0xb544, 0xb543, 0x3a31, 0x29b2, 0x29d2, 0x29d2, 0x29b2, 0x29d2, 0x29d2, 0x29d2
	.hword 0x29d2, 0x31b0, 0x40e3, 0x40e2, 0x40a2, 0x6227, 0xef9d, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d
	.hword 0xd615, 0xc572, 0xa470, 0xa491, 0xa4b1, 0x9c91, 0x3a32, 0x29d2, 0x29d2, 0x29d2
	.hword 0x29d2, 0x29d2, 0x29d2, 0x31f2, 0x7bca, 0x7bc9, 0x31f1, 0x29b2, 0x29d2, 0x29d2
	.hword 0x29b2, 0x29b2, 0x29d2, 0x29d2, 0x29d2, 0x31b0, 0x40e3, 0x40c2, 0x40a2, 0x6227
	.hword 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7ff, 0xf7df, 0x61e6, 0x4060, 0x40a1, 0x40a2
	.hword 0x31b0, 0x29d3, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x29d2, 0x29b2, 0x29b2
	.hword 0x29d2, 0x29b2, 0x2191, 0x2191, 0x2171, 0x2171, 0x2191, 0x2191, 0x2191, 0x294f
	.hword 0x4082, 0x4081, 0x3860, 0x61e6, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xef9d, 0x9c2f, 0x7b2b
	.hword 0x5144, 0x48c2, 0x48e2, 0x48e3, 0x31b0, 0x29d3, 0x29d2, 0x29d2, 0x29d2, 0x29d2
	.hword 0x29d2, 0x29b2, 0x29b2, 0x29b2, 0x29b2, 0x3a12, 0x94d8, 0x9d18, 0x9d18, 0x9d18
	.hword 0x9d18, 0x9d18, 0x9d18, 0x9d17, 0xa4b2, 0xa4b1, 0xa4b1, 0xb554, 0xef9d, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xef9d, 0x61e6, 0x3861, 0x40c2, 0x48e2, 0x40c2, 0x40c2, 0x2990, 0x29b2
	.hword 0x29b2, 0x29b2, 0x29b2, 0x29b1, 0x29b1, 0x29b1, 0x29b1, 0x29b1, 0x2191, 0x4253
	.hword 0xef9d, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xf7ff, 0xf7ff
	.hword 0xf7ff, 0xf7de, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d, 0x6207, 0x40a1, 0x40c2, 0x40c2
	.hword 0xa4b2, 0xce17, 0xbe1a, 0xbe1b, 0xbe1a, 0xbe1a, 0xbe1a, 0xbe1a, 0xbe1a, 0xbe1a
	.hword 0xbe1a, 0xbe1a, 0xbe1a, 0xc65b, 0xef9d, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xef9d
	.hword 0x6a48, 0x4903, 0x4924, 0x4924, 0xce58, 0xffff, 0xf7de, 0xf7de, 0xf7de, 0xf7de
	.hword 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7de, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xdefa, 0xdeba, 0xdeba, 0xdeba, 0xef7d, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7de
	.hword 0xf7de, 0xf7de, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be
	.hword 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xf7be,0xf7be
	
	